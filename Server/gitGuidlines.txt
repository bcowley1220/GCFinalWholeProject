Git Work Flow

Golden Rules:
1. Always be in your working branch
  - Once you have created your branch and have ensured that you have an up to date copy of 
  the project, there are not a lot of reason to return to the master file .
2. You'll commit every time you finish a portion of your task.
  - Think of committing as a "save as", or the save in your game before you go into a boss fight.
  - You aren't tied to your commit, you are just logging that point and making sure that you can
  go back to it at any point if something goes wrong.
3. Only push when your component/task is completed
  - The only reason to push up to GitHub is when your stuff is ready for us to see
4. Merging isn't fun
  - merge/pull requests take time, and can be a pain. If you have any addons that will mess with
  the structure of your file (ex. extreme indentions on vsCode) please disable while we are working 
  on this, because it could flag your entire file for review instead of just the changes you made.
  - Brendan will handle most of the merge requests for the sake of consistency, but if he is unavailable
  it should not be the owner of the changes who is merging. We need to keep the files are similar as possible
5. Always be in your working branch
  - Yes this is a purposeful repeat, please, please, please...





////////////////////////
THE FOLLOWING STEPS ARE COMPLETED BY THE GITHUB OWNER! 
//////////////////////
Initial Local Set up:
1. Folder is created in 1 machine. 
2. git init
3. git add .
4. git commit -m 'init commit';

GitHub Setup
1. create new repo in Github 
2. push local repo into Github

/////////////////////////////////////

////////////////////////////////////
THE FOLLOWING STEPS ARE FOR THE OTHER GROUP MEMBERS
///////////////////////////////////

1. cd into the parent folder that you want the cloned repo to reside
2. Go to Github and copy the clone request that is auto generated by GH.
3. git clone whateverTheLinkIsThatGHGaveYou
4. cd nameOfProject
5. git status (check to make sure your repo is active, if not, ask for help)
6. git checkout -b myIntitalsWorkingBranch (ex. bcWorkingBranch)
7. Stop... please have full understanding of what is below before starting on anything

////////////////////////////////////
THE FOLLOWING INFORMATION IS ON WORKING IN YOUR WORKING BRANCH 
//////////////////////////////////

Git Push:
When you are ready to share your component to GitHub:
1. git status
  - Please make sure that you are on your working branch, and not master. 
  - If you are working on master and git push, it will attempt to change the master file, and most
  likely not have to be reviewed with a merge/pull request. THIS IS BAD! NO TOUCHY!
2. git add/commit/... (if you have done this already move to next line.)
3. git push
  - This will only push up YOUR BRANCH, not the master file you are working on
  - This is really important because it gives us an extra layer of security so we are not
  changing our master file unintentionally.
4. Notify Brendan that you have pushed, what the component was, and if it needs to be merged immediately
  - If you are working on an important part that everyone else needs, please share it, if not it'll be merged 
  every 30-45min, or as needed.
  - The merge request timing will really depend on the stage we are in; the closer we get to the finish line
  the longer the the git leader will be spending time watching for merges and problems.



Git Pull:
When you are notified of a change to master, please make sure that you take the following steps:
1. git commit the component you are currently working on.
2. git checkout master
3. git pull
  - this will bring the updated master in from github and replace your master file
  - it will not affect your working branch, yet...
4. git checkout nameOfWorkingBranch
5. git merge master
  - this command is taking the information from master and is merging it into your working branch
  - you will have to manually fix the changes in your local repo either through the command line or through vsCode
  - unless you are working on the exact same portion of code as the update, please accept as much of the incoming 
  change as possible. What is in master works, and was deemed ready, so please change your code to match 
  what is in master.
6. you will most likely have to git add/commit to confirm the changes


